# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key = ${APPLICATION_SECRET}

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

play.application.loader = AppLoader

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

# Allow access to the server - since we restrict connections to the vpc in aws, this should be safe

play.filters.hosts {
  allowed = ["."]
}

# Don't use content security police. Again since this isn't a public service this should hopefully be accetable.
# We had trouble setting a proper value for this because amiable uses inline scripts which mess up the policy

play.filters.headers.contentSecurityPolicy = null

prism.url = ${PRISM_URL}
amigo.url = ${AMIGO_URL}

host=${HOST}

auth {
  domain=${AUTH_DOMAIN}
  google {
    serviceAccountCertPath=${GOOGLE_SERVICE_ACCOUNT_CERT_PATH}
    clientId=${GOOGLE_CLIENT_ID}
    clientSecret=${GOOGLE_CLIENT_SECRET}
    2faUser=${GOOGLE_2FA_USER}
    2faGroupId=${2FA_GROUP_ID}
    departmentGroupId=${DEPARTMENT_GROUP_ID}
  }
}

stage=${STAGE}

amiable.mailClient.fromAddress = ${MAIL_ADDRESS}

amiable.owner.notification.cron = ${?OWNER_NOTIFICATION_CRON}
